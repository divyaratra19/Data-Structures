// { Driver Code Starts
// driver

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}

struct Node* addTwoLists(struct Node* first, struct Node* second);

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        
        cin>>n;
        Node* first = buildList(n);
        
        cin>>m;
        Node* second = buildList(m);
        
        Node* res = addTwoLists(first,second);
        printList(res);
    }
    return 0;
}
// } Driver Code Ends


/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
Node* insertAtHead(Node* h, Node* node)
{
  node->next = h;
  return node;
}
// REVERSE A LIST AND RETURN POINTER TO THE HEAD OF REVERSED LIST
Node* reverseList(Node* h)
{
  Node* newHead = NULL;
  while(h != NULL)
  {
    // REMOVING FROM ORIGINAL LIST
    Node* temp = h;
    h = h->next;
    
    newHead = insertAtHead(newHead, temp);
  }
  return newHead;
}
struct Node* addTwoLists(struct Node* h1, struct Node* h2)
{
    h1 = reverseList(h1);
  h2 = reverseList(h2);
  
  Node* resList = NULL;
  int sum = 0;
  int carry = 0;
  
  while(h1 != NULL || h2 != NULL)
  {
    sum = carry;
    if(h1 != NULL)
    {
      sum += h1->data;
      h1 = h1->next;
    }
    
    if(h2 != NULL)
    {
      sum += h2->data;
      h2 = h2->next;
    }
    carry = sum / 10; // CARRY FOR NEXT POSITION
    sum = sum % 10;
    
    resList = insertAtHead(resList, new Node(sum));
  }
  
  if(carry != 0)
    resList = insertAtHead(resList, new Node(carry));
  
  return resList;

}
